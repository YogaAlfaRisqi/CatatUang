model Transaction {
  id                  String                @id @default(cuid())
  userId              String
  categoryId          String
  paymentMethodId     String?
  type                TransactionType
  amount              Decimal               @db.Decimal(15, 2)
  currency            Currency              @default(IDR)
  title               String?
  description         String?
  notes               String?
  transactionDate     DateTime              @default(now())
  location            String?
  latitude            Float?
  longitude           Float?
  attachments         Json?
  toUserId            String?
  linkedTransactionId String?               @unique
  isRecurring         Boolean               @default(false)
  recurringId         String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  deletedAt           DateTime?
  tags                TransactionTag[]
  category            Category              @relation(fields: [categoryId], references: [id])
  linkedTransaction   Transaction?          @relation("TransferLink", fields: [linkedTransactionId], references: [id])
  transferLink        Transaction?          @relation("TransferLink")
  paymentMethod       PaymentMethod?        @relation(fields: [paymentMethodId], references: [id])
  recurring           RecurringTransaction? @relation(fields: [recurringId], references: [id])
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([categoryId])
  @@index([type])
  @@index([transactionDate])
  @@index([deletedAt])
  @@index([recurringId])
  @@map("transactions")
  @@schema("transaction")
}

model RecurringTransaction {
  id              String              @id @default(cuid())
  userId          String
  categoryId      String
  paymentMethodId String?
  type            TransactionType
  amount          Decimal             @db.Decimal(15, 2)
  currency        Currency            @default(IDR)
  title           String
  description     String?
  frequency       RecurrenceFrequency
  startDate       DateTime
  endDate         DateTime?
  nextDate        DateTime
  isActive        Boolean             @default(true)
  dayOfMonth      Int?
  dayOfWeek       Int?
  lastGeneratedAt DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  deletedAt       DateTime?
  category        Category            @relation(fields: [categoryId], references: [id])
  paymentMethod   PaymentMethod?      @relation(fields: [paymentMethodId], references: [id])
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions    Transaction[]

  @@index([userId])
  @@index([isActive])
  @@index([nextDate])
  @@map("recurring_transactions")
  @@schema("transaction")
}

model Tag {
  id           String           @id @default(cuid())
  name         String           @unique
  color        String?
  createdAt    DateTime         @default(now())
  transactions TransactionTag[]

  @@map("tags")
  @@schema("transaction")
}

model TransactionTag {
  transactionId String
  tagId         String
  tag           Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@id([transactionId, tagId])
  @@index([transactionId])
  @@index([tagId])
  @@map("transaction_tags")
  @@schema("transaction")
}

model PaymentMethod {
  id                    String                 @id @default(cuid())
  userId                String
  name                  String
  type                  String
  icon                  String?
  color                 String?
  accountNumber         String?
  accountName           String?
  isDefault             Boolean                @default(false)
  isActive              Boolean                @default(true)
  balance               Decimal?               @db.Decimal(15, 2)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  deletedAt             DateTime?
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recurringTransactions RecurringTransaction[]
  transactions          Transaction[]

  @@index([userId])
  @@index([isDefault])
  @@map("payment_methods")
  @@schema("transaction")
}
